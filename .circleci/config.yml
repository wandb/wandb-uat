version: 2.1

orbs:
  slack: circleci/slack@4.9.3
  gke: circleci/gcp-gke@1.4.0

parameters:
  manual:
    type: boolean
    default: false
  manual_nightly:
    type: boolean
    default: false
  manual_nightly_slack_notify:
    type: boolean
    default: false
  vm_image_tag:
    type: string
    default: "20220228"
  docker_tag:
    type: string
    default: "22.02"

commands:
  setup_gcloud:
    steps:
      - run:
          name: "Setup gcloud"
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE

jobs:
  lint:
    docker:
      - image: "python:3.8"
    steps:
      - checkout
      - run:
          name: "Lint sources"
          command: |
            pip install black flake8 mypy
            black --check .
            flake8 .
            mypy .

  slack_notify:
    parameters:
      message:
        type: string
        default: ":tada:"
      execute:
        type: boolean
        default: true
    docker:
      - image: 'cimg/base:stable'
    steps:
      - when:
          condition: << parameters.execute >>
          steps:
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "plain_text",
                            "text": "<< parameters.message >>",
                            "emoji": true
                          }
                        ]
                      }
                    ]
                  }
                event: always
                channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL
      # this is to make sure `steps` is not empty
      - run:
          name: Print message to stdout
          command: echo << parameters.message >>

  create_vm_gcp:
    parameters:
      framework:
        type: string
    docker:
      - image: "python:3.8"
    steps:
      - checkout
      - gke/install
#      - run:
#          name: "Update gcloud components"
#          command: gcloud --quiet components update
      - setup_gcloud
      - run:
          name: "Create GCP VM"
          command: |
            gcloud compute config-ssh --remove
            gcloud compute config-ssh
            python tools/gcp.py create_vm -v \
              --instance_name=gcp-<<parameters.framework>> \
              --vm_image_name=nvidia-gpu-cloud-image-<<parameters.framework>>-<<pipeline.parameters.vm_image_tag>>

  delete_vm_gcp:
    parameters:
      framework:
        type: string
    docker:
      - image: "cimg/base:stable"
    steps:
      - checkout
      - gke/install
      - run:
          name: "Update gcloud components"
          command: gcloud --quiet components update
      - setup_gcloud
      - run:
          name: "Delete GCP VM"
          command: |
            python tools/gcp.py delete_vm -v --instance_name=gcp-<<parameters.framework>>

workflows:
  lint:
    jobs:
      - lint

  nightly:
#    when:
#      and:
#        - equal:
#            - << pipeline.trigger_source >>
#            - scheduled_pipeline
#        - equal:
#            - << pipeline.schedule.name >>
#            - "nightly"
    jobs:
      - slack_notify:
          name: "slack-notify-on-start"
          context: slack-secrets
          message: ":nvidia: :runner: *Nightly NVIDIA UAT run started!*"
      # manage vms on GCP
      - create_vm_gcp:
          matrix:
            parameters:
              framework: [ "tensorflow", "pytorch" ]
          name: "create_vm_gcp_<<matrix.framework>>"
          requires:
            - "slack-notify-on-start"
      - delete_vm_gcp:
          matrix:
            parameters:
              framework: [ "tensorflow", "pytorch" ]
          name: "delete_vm_gcp_<<matrix.framework>>"
          requires:
            - "create_vm_gcp_<<matrix.framework>>"
      # todo: run the tests
      - slack_notify:
          name: "slack-notify-on-finish"
          context: slack-secrets
          requires:
            - delete_vm_gcp_tensorflow
            - delete_vm_gcp_pytorch
          message: ":nvidia: :checkered_flag: *Nightly NVIDIA UAT run finished!*"
