version: 2.1

orbs:
  slack: circleci/slack@4.9.3
  gke: circleci/gcp-gke@1.4.0

parameters:
  manual:
    type: boolean
    default: false
  slack_notify:
    type: boolean
    default: true
  execute_gcp:
    type: boolean
    default: true
  execute_aws:
    type: boolean
    default: false
  execute_azure:
    type: boolean
    default: false
  vm_image_tag:
    type: string
    default: "20220228"
  docker_tag:
    type: string
    default: "22.02"
  wandb_version:
    type: string
    default: "0.13.9"

commands:
  setup_gcloud:
    steps:
      - run:
          name: "Setup gcloud"
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            ssh-keygen -b 2048 -t rsa -f ~/.ssh/google_compute_engine -q -N ""

jobs:
  lint:
    docker:
      - image: "python:3.8"
    steps:
      - checkout
      - run:
          name: "Lint sources"
          command: |
            pip install black flake8 mypy
            black --check .
            flake8 .
            mypy .

  slack_notify:
    parameters:
      message:
        type: string
        default: ":tada:"
      execute:
        type: boolean
        default: true
    docker:
      - image: 'cimg/base:stable'
    steps:
      - when:
          condition: << parameters.execute >>
          steps:
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "plain_text",
                            "text": "<< parameters.message >>",
                            "emoji": true
                          }
                        ]
                      }
                    ]
                  }
                event: always
                channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL
      # this is to make sure `steps` is not empty
      - run:
          name: Print message to stdout
          command: echo << parameters.message >>

  create_vm_gcp:
    parameters:
      framework:
        type: string
      execute:
        type: boolean
        default: true
      notify_on_failure:
        type: boolean
        default: true
    docker:
      - image: "python:3.8"
    steps:
      - checkout
      - when:
          condition: << parameters.execute >>
          steps:
            - gke/install
            - run:
                name: "Update gcloud components"
                command: gcloud --quiet components update
            - setup_gcloud
            - run:
                name: "Create GCP VM"
                command: |
                  python tools/gcp.py create_vm -v \
                    --instance_name=gcp-<<parameters.framework>> \
                    --vm_image_name=nvidia-gpu-cloud-image-<<parameters.framework>>-<<pipeline.parameters.vm_image_tag>>
            - when:
                condition: << parameters.notify_on_failure >>
                steps:
                  - slack/notify:
                      event: fail
                      template: basic_fail_1
                      mentions: "@channel"
                      # taken from slack-secrets context
                      channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL

  user_acceptance_tests_gcp:
    parameters:
      framework:
        type: string
      framework_tag:
        type: string
      test_args:
        type: string
        default: "--all"
      notify_on_failure:
        type: boolean
        default: true
      notify_on_success:
        type: boolean
        default: true
      execute:
        type: boolean
        default: true
    docker:
      - image: "python:3.8"
    steps:
      - checkout
      - when:
          condition: << parameters.execute >>
          steps:
            - gke/install
#            - run:
#                name: "Update gcloud components"
#                command: gcloud --quiet components update
            - setup_gcloud
            - run:
                name: "Run user acceptance tests"
                command: |
                  WANDB_PROJECT=nvidia-gcp-<<parameters.framework>>-$(date -u +%Y%m%d) \
                  python tools/gcp.py run_user_acceptance_tests -v \
                    --instance_name=gcp-<<parameters.framework>> \
                    --vm_image_name=nvidia-gpu-cloud-image-<<parameters.framework>>-<<pipeline.parameters.vm_image_tag>> \
                    --docker_image_name=nvcr.io/nvidia/<<parameters.framework>>:<<pipeline.parameters.docker_tag>>-<<parameters.framework_tag>> \
                    --test_args="<<parameters.test_args>>" \
                    --wandb_version="<<pipeline.parameters.wandb_version>>"
            - run:
                name: "Delete GCP VM"
                when: always
                command: |
                  python tools/gcp.py delete_vm -v --instance_name=gcp-<<parameters.framework>>
            # conditionally post a notification to slack if the job failed/succeeded
            - when:
                condition: << parameters.notify_on_failure >>
                steps:
                  - slack/notify:
                      event: fail
                      template: basic_fail_1
                      mentions: "@channel"
                      # taken from slack-secrets context
                      channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL
            - when:
                condition: << parameters.notify_on_success >>
                steps:
                  - slack/notify:
                      event: pass
                      template: basic_success_1
                      # taken from slack-secrets context
                      channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL

workflows:
  lint:
    jobs:
      - lint

  nightly:
    when:
      or:
        - << pipeline.parameters.manual >>
        - and:
            - equal:
                - << pipeline.trigger_source >>
                - scheduled_pipeline
            - equal:
                - << pipeline.schedule.name >>
                - "nightly"
    jobs:
      - slack_notify:
          name: "slack-notify-on-start"
          context: slack-secrets
          message: ":nvidia: :runner: *Nightly NVIDIA UAT run started!*"
          execute: << pipeline.parameters.slack_notify >>
      # create vms on GCP
      - create_vm_gcp:
          matrix:
            parameters:
              framework: [ "tensorflow", "pytorch" ]
          name: "create_vm_gcp_<<matrix.framework>>"
          execute: << pipeline.parameters.execute_gcp >>
          context: slack-secrets
          notify_on_failure: << pipeline.parameters.slack_notify >>
          requires:
            - "slack-notify-on-start"
      # run the user acceptance tests, shut down the VMs after the tests are finished
      # and report the results to Slack
      - user_acceptance_tests_gcp:
          name: "uat_gcp_tensorflow"
          framework: tensorflow
          framework_tag: "tf2-py3"
          test_args: "--skip-torch"
          execute: << pipeline.parameters.execute_gcp >>
          context: slack-secrets
          notify_on_failure: << pipeline.parameters.slack_notify >>
          notify_on_success: << pipeline.parameters.slack_notify >>
          requires:
            - "create_vm_gcp_tensorflow"
      - user_acceptance_tests_gcp:
          name: "uat_gcp_pytorch"
          framework: pytorch
          framework_tag: "py3"
          test_args: "--skip-keras --skip-tensorflow"
          execute: << pipeline.parameters.execute_gcp >>
          context: slack-secrets
          notify_on_failure: << pipeline.parameters.slack_notify >>
          notify_on_success: << pipeline.parameters.slack_notify >>
          requires:
            - "create_vm_gcp_pytorch"
